package edu.kit.informatik;

import java.util.*;

/**
 * Simulates user interaction via the terminal for testing.
 *
 * @author  Markus Himmel
 * @version 0.10, 2017/02/11
 */
public final class Terminal {

    public static class Output
    {
    }

    public static class StringOutput extends Output
    {
        private String content;

        public StringOutput(String content)
        {
            if (content == null)
                throw new IllegalArgumentException("content may not be null");

            this.content = content;
        }

        public boolean equals(Object other)
        {
            if (other == null) return false;

            return content.equals(other.toString());
        }

        public String toString()
        {
            return content;
        }
    }

    public static final Output error = new Output()
    {
        public String toString()
        {
            return "Error";
        }
    };
    public static final Output ok = new StringOutput("Ok");

    public static Output[] strs(String... strings)
    {
        Output[] result = new Output[strings.length];

        for (int i = 0; i < strings.length; i++)
        {
            result[i] = new StringOutput(strings[i]);
        }

        return result;
    }

    public static Output[] nok(int n)
    {
        return Collections.nCopies(n, Terminal.ok).toArray(new Output[0]);
    }

    public static Output[] nerror(int n)
    {
        return Collections.nCopies(n, Terminal.error).toArray(new Output[0]);
    }

    private static Queue<String> pendingInput;
    private static ArrayList<Output> output;

    @Deprecated
    private Terminal() {
        throw new AssertionError("Utility class constructor.");
    }

    public static void initialize(String... input)
    {
        pendingInput = new LinkedList<String>(Arrays.asList(input));
        output = new ArrayList<>();
    }

    public static void finish()
    {
        if (!pendingInput.isEmpty())
            throw new RuntimeException("Program did not consume all input");
    }

    public static Output[] getOutput()
    {
        return output.toArray(new Output[0]);
    }

    public static void printError(final String message) {
        output.add(error);
    }

    public static void printLine(final Object object) {
        output.add(new StringOutput(object.toString()));
    }

    public static void printLine(final char[] charArray) {
        output.add(new StringOutput(String.valueOf(charArray)));
    }

    public static String readLine() {
        try {
            return pendingInput.remove();
        } catch (final NoSuchElementException e) {
            throw new RuntimeException("Program asked for too much input", e);
        }
    }
}

// vim: set ft=java expandtab:
